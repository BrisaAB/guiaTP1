%pertenece

/*corte*/
miembro(X,[X|_]):-!. %si lo encuentra corta y devuelve true
/*recursion*/
miembro(X,[_|R]):-miembro(X,R). %si no lo encuentra sigue buscando.
                    %Si la lista se queda vacia y no encontro nada devuelve false.

%elimina repetidos
/*corte*/
elimina_repe([],[]):-!. %si la lista esta vacia devuelve lista vacia y corta recursion
/*recursion*/
elimina_repe([E|C],R):- elimina_repe(C,R), miembro(E,R),!. %si E esta en el en la lista C, no lo agrega
elimina_repe([E|C],[E|R]):- elimina_repe(C,R). %Como E paso la prueba anterior (es decir, no esta repetido en C), lo agrega a la lista R .


%Recorrer arboles
/*Normales*/
/*Este funciona sacandole el corte a miembro*/
/*corte*/
caminos([N],[N]):-!. %Si es una lista de un elemento, la devuelvo
/*recursividad*/
caminos([N|LH],[N|C]):- miembro(X,LH), caminos(X,C). %busco todos los hijos de N con miembro y Busco los caminos.
     
/*Binarios*/

caminos2([],[]):-!.
caminos2([N],[N]):-!.

caminos2([I,N,_],[N|CI]):- caminos2(I,CI).
caminos2([_,N,D],[N|CD]):- caminos2(D,CD).

%OPERACIONES CON listas
/*union*/
%corte
union([],[],[]):-!. %Si ambas listas están vacías, devuelvo una lista vacía.
%comportamiento
union([],[E2|C2],U):-miembro(E2,U), union([],C2,U),!.  %Si el primer elemento de la segunda lista está en la lista que voy a devolver, no lo agrego.
union([],[E2|C2],[E2|U]):-union([],C2,U),!.  % Si el primer elemento de la segunda lista no está en la que voy a devolver, lo agrego.
union([E1|C1],C2,U):-miembro(E1,C1), union(C1,C2,U),!. %Por estas funciones pasa primero, y es lo mismo que en las dos de arriba pero para la primer lista.
union([E1|C1],C2,[E1|U]):-union(C1,C2,U).

/*interseccion*/
%corte
interseccion([],_,[]):-!. %si la primer lista está vacía, no hay intersección(devuelvo lista vacía). No hace falta evaluar la segunda xq solo le saco elementos a la primer lista.
                        %Si me pasan la segunda lista vacía funciona igual.
%comportamiento
interseccion([E1|C1],C2,[E1|I]):- miembro(E1,C2), interseccion(C1,C2,I),!. %Si el elemento 1 está en el conjunto 2, meto en elemento en la lista que voy a devolver.
interseccion([_|C1],C2,I):- interseccion(C1,C2,I). %Si no está no lo meto y sigo buscando.

/*diferencia*/

%corte
diferencia([],_,[]):-!. %Si el primer conjunto está vacío devuelvo una lista vacía.

%comportamiento
diferencia([Elem|C1],C2,U):- miembro(Elem,C2), diferencia(C1,C2,U), !. %Si el elemento 1 está en el conjunto 2 no lo meto en la lista y sigo buscando.
diferencia([E1|C1],C2,[E1|U]):- diferencia(C1,C2,U). %Si el elemento 1 no está en el conjunto 2 lo meto en la lista y sigo buscando.



        


