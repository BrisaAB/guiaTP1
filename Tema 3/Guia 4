/*Ejercicio 3*/
%validación
valido([]):-!.
valido([E|C]):- miembro(E,C), !,fail. 
valido([_|R]):- valido(R).
/*unión*/
%Fallos
union(C1,_,_):-not(valido(C1)),write('El parámetro 1 no es válido\n'),!,fail.
union(_,C2,_):-not(valido(C2)),write('El paraámetro 2 no es válido\n'),!,fail.
%corte
union([],[],[]):-!. %Si ambas listas están vacías, devuelvo una lista vacía.
%comportamiento
union([],[E2|C2],U):-miembro(E2,U), union([],C2,U),!.  %Si el primer elemento de la segunda lista está en la lista que voy a devolver, no lo agrego.
union([],[E2|C2],[E2|U]):-union([],C2,U),!.  % Si el primer elemento de la segunda lista no está en la que voy a devolver, lo agrego.
union([E1|C1],C2,U):-miembro(E1,C1), union(C1,C2,U),!. %Por estas funciones pasa primero, y es lo mismo que en las dos de arriba pero para la primer lista.
union([E1|C1],C2,[E1|U]):-union(C1,C2,U).

/*interseccion*/

%fallos
interseccion(C1,_,_):-not(valido(C1)),write('El parámetro 1 no es válido\n'),!,fail.
interseccion(_,C2,_):-not(valido(C2)),write('El paraámetro 2 no es válido\n'),!,fail.
%corte
interseccion([],_,[]):-!. %si la primer lista está vacía, no hay intersección(devuelvo lista vacía). No hace falta evaluar la segunda xq solo le saco elementos a la primer lista.
                        %Si me pasan la segunda lista vacía funciona igual.
%comportamiento
interseccion([E1|C1],C2,[E1|I]):- miembro(E1,C2), interseccion(C1,C2,I),!. %Si el elemento 1 está en el conjunto 2, meto en elemento en la lista que voy a devolver.
interseccion([_|C1],C2,I):- interseccion(C1,C2,I). %Si no está no lo meto y sigo buscando.

/*diferencia*/
%Fallos
diferencia(C1,_,_):-not(valido(C1)),write('El parámetro 1 no es válido\n'),!,fail.
diferencia(_,C2,_):-not(valido(C2)),write('El paraámetro 2 no es válido\n'),!,fail.

%corte
diferencia([],_,[]):-!. %Si el primer conjunto está vacío devuelvo una lista vacía.

%comportamiento
diferencia([Elem|C1],C2,U):- miembro(Elem,C2), diferencia(C1,C2,U), !. %Si el elemento 1 está en el conjunto 2 no lo meto en la lista y sigo buscando.
diferencia([E1|C1],C2,[E1|U]):- diferencia(C1,C2,U). %Si el elemento 1 no está en el conjunto 2 lo meto en la lista y sigo buscando.

/*Ejercicio 2*/
%Conocimiento
vista('Jose',['Misterio a Bordo', 'The Perfection', 'Otro día para matar','Barreras','Yo soy Sam','Inspection']).
vista('Maria',['Quizás para siempre','A pesar de todo','La casa del Lago','Barreras']).
vista('Pedro',['Barreras', 'Otro día para matar', 'Yo soy Sam','A pesar de todo']).

%función extra
cantidad([],0).
cantidad([_|Lista],Can):- cantidad(Lista,Can2), Can is Can2 + 1.
/*También necesito intersección y diferncia que están escritas en el ejercicio 3*/

%corte
recomendacion_aux(_,[],[]):-!. 
%recursividad
/*Siendo Lp1 la lista de películas de el usuario al que le quiero recomendar, Lp2 la lista de películas de uno de los usuarios de la base de conocimiento, S la similitud y Lr la lista de pelis recomendadas.*/

recomendacion_aux(Lp1,[Lp2|R],Lr):- interseccion(Lp1,Lp2,R1), cantidad(R1,S), S >= 2, %compruebo que tienen al menos 2 peliculas vistas iguales
    							diferencia(Lp2,Lp1,R2), recomendacion(Lp1,R,Lr2), union(R2,Lr2,Lr),!. 
recomendacion_aux(Lp1,[_|R],Lr):- recomendacion(Lp1,R,Lr).%si el primer elemento no tiene S>=2, se va a usar esta funcion.

%Wrapper
recomendacion(Usuario,Recomendacion):- findall(X,vista(_,X),B), vista(Usuario,Lp1), recomendacion_aux(Lp1,B,Recomendacion).   


/*Ejercicio 4*/
